AWSTemplateFormatVersion: '2010-09-09'
Description: WordVile Backend

Parameters:
  AdminToken:
    Type: String
    Description: Admin token for protected API endpoints
    Default: changeme
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for word data
    Default: wordvile-words

Resources:
  # S3 bucket policy for Lambda access
  S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketName}'
              - !Sub 'arn:aws:s3:::${S3BucketName}/*'

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - !Ref S3AccessPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: WordVileAPI
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for /words
  WordsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: words
      
  # API Gateway Method for POST /words
  PostWordsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref WordsResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.X-Admin-Token: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostWordsFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # CORS for POST /words
  PostWordsCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref WordsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Resource for /words/{game}
  WordsGameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref WordsResource
      PathPart: '{game}'
      
  # API Gateway Resource for /verify-password
  VerifyPasswordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: verify-password
      
  # Lambda Function for POST /words
  PostWordsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName
          ADMIN_TOKEN: !Ref AdminToken
      Code:
        ZipFile: |
          // Using AWS SDK v3 which is included in the Node.js 20.x runtime
          const { S3Client, GetObjectCommand, PutObjectCommand } = require('@aws-sdk/client-s3');
          const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');
          const { sdkStreamMixin } = require('@aws-sdk/util-stream');
          const { Readable } = require('stream');
          
          const s3Client = new S3Client({ region: process.env.AWS_REGION || 'us-east-1' });
          
          console.log('Loading PostWordsFunction');
          
          // Helper function to stream to string
          const streamToString = (stream) =>
            new Promise((resolve, reject) => {
              const chunks = [];
              stream.on('data', (chunk) => chunks.push(chunk));
              stream.on('error', reject);
              stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf-8')));
            });
          
          exports.handler = async (event, context) => {
              console.log('Received event:', JSON.stringify(event, null, 2));
              
              // Check admin token
              const adminToken = event.headers?.['x-admin-token'] || event.headers?.['X-Admin-Token'];
              if (adminToken !== process.env.ADMIN_TOKEN) {
                  return {
                      statusCode: 403,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                      },
                      body: JSON.stringify({ error: 'Unauthorized' })
                  };
              }
              
              const bucketName = process.env.S3_BUCKET || '${S3BucketName}';
              const game = 'default'; // For now, using a single game
              const key = `${game}.json`;
              
              try {
                  // Parse the request body
                  let requestBody;
                  try {
                      requestBody = JSON.parse(event.body || '{}');
                  } catch (e) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                              'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                          },
                          body: JSON.stringify({ error: 'Invalid JSON body' })
                      };
                  }
                  
                  // Validate request body
                  if (!requestBody.word || !requestBody.definition) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                              'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                          },
                          body: JSON.stringify({ error: 'Missing required fields: word and definition are required' })
                      };
                  }
                  
                  // Get existing words
                  let words = [];
                  try {
                      const getCommand = new GetObjectCommand({
                          Bucket: bucketName,
                          Key: key
                      });
                      const { Body } = await s3Client.send(getCommand);
                      const bodyContents = await streamToString(Body);
                      words = JSON.parse(bodyContents);
                      if (!Array.isArray(words)) {
                          words = [];
                      }
                  } catch (error) {
                      if (error.name !== 'NoSuchKey') {
                          console.error('Error getting existing words:', error);
                          throw error;
                      }
                      // If the file doesn't exist, we'll create it with the new word
                  }
                  
                  // Add new word
                  const newWord = {
                      word: requestBody.word,
                      definition: requestBody.definition,
                      createdAt: new Date().toISOString()
                  };
                  
                  words.push(newWord);
                  
                  // Save back to S3
                  const putCommand = new PutObjectCommand({
                      Bucket: bucketName,
                      Key: key,
                      Body: JSON.stringify(words, null, 2),
                      ContentType: 'application/json'
                  });
                  
                  await s3Client.send(putCommand);
                  
                  return {
                      statusCode: 200,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                      },
                      body: JSON.stringify(newWord)
                  };
              } catch (error) {
                  console.error('Error:', error);
                  
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                      },
                      body: JSON.stringify({
                          error: 'Failed to save word',
                          message: error.message,
                          name: error.name,
                          code: error.Code || error.code,
                          statusCode: error.statusCode || 500,
                          stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
                      })
                  };
              }
          };

  # Lambda Functions
  GetWordsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName
      Code:
        ZipFile: |
          // Using AWS SDK v3 which is included in the Node.js 20.x runtime
          const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');
          const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');
          const { sdkStreamMixin } = require('@aws-sdk/util-stream');
          const { Readable } = require('stream');
          
          const s3Client = new S3Client({ region: process.env.AWS_REGION || 'us-east-1' });
          
          console.log('Loading function');
          
          // Helper function to stream to string
          const streamToString = (stream) =>
            new Promise((resolve, reject) => {
              const chunks = [];
              stream.on('data', (chunk) => chunks.push(chunk));
              stream.on('error', reject);
              stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf-8')));
            });
          
          exports.handler = async (event, context) => {
              console.log('Received event:', JSON.stringify(event, null, 2));
              
              const bucketName = process.env.S3_BUCKET
              const game = 'default';
              const key = `${game}.json`;
              
              console.log(`Getting object from bucket: ${bucketName}, key: ${key}`);
              
              try {
                  const command = new GetObjectCommand({
                      Bucket: bucketName,
                      Key: key
                  });
                  
                  const { Body } = await s3Client.send(command);
                  console.log('Successfully retrieved object from S3');
                  
                  // Convert the Readable stream to a string
                  const bodyContents = await streamToString(Body);
                  
                  return {
                      statusCode: 200,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                      },
                      body: bodyContents
                  };
              } catch (error) {
                  console.error('Error:', error);
                  
                  if (error.name === 'NoSuchKey' || error.Code === 'NoSuchKey') {
                      console.log('No such key - returning empty array');
                      return {
                          statusCode: 200,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                              'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                          },
                          body: JSON.stringify([])
                      };
                  }
                  
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token',
                          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
                      },
                      body: JSON.stringify({
                          error: 'Failed to fetch words',
                          message: error.message,
                          name: error.name,
                          code: error.Code || error.code,
                          statusCode: error.statusCode || 500,
                          stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
                      })
                  };
              }
          };
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName

  # API Gateway Method for GET /words/{game}
  GetWordsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref WordsGameResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetWordsFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # CORS for GET /words/{game}
  GetWordsCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref WordsGameResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Admin-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # Lambda Permission for API Gateway GET method
  GetWordsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetWordsFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/words/*'
      
  # Lambda Permission for API Gateway POST method
  PostWordsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostWordsFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/words'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetWordsMethod
      - GetWordsCorsMethod
      - PostWordsMethod
      - PostWordsCorsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: Prod

# Outputs
Outputs:
  ApiUrl:
    Description: URL of the API Gateway
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  GetWordsUrl:
    Description: URL for the Get Words endpoint
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/words/{game}'
  AdminToken:
    Description: Admin token for protected endpoints
    Value: !Ref AdminToken
